{"version":3,"sources":["util/spotify.js","components/search-bar/search-bar.component.jsx","components/track/track.component.jsx","components/track-list/track-list.component.jsx","components/search-results/search-results.component.jsx","components/playlist/playlist.component.jsx","components/app/App.js","index.js"],"names":["accessToken","SearchBar","props","state","searchTerm","search","bind","handleTermChange","event","this","onSearch","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","PlayList","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","hasAccessToken","window","location","href","match","hasExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","term","fetch","headers","Authorization","then","response","ok","json","console","log","jsonResponse","items","artists","uri","savePlaylist","playlistName","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","currentTracks","find","savedTrack","push","updatedTracks","filter","selectedTrack","fetchedData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f91a7f65.chunk.js","sourcesContent":["\r\n// let accessToken = 'BQDyWEqjb9HluiPplnGLHamIZPm2ejR1wbizGq5XmgVSFlKpz3fbNRU747qJBUIJK6axREE1KJytUv4ZNAGzI7hfu9qXCe9NTK6tEtI5HxJQMW_ZLr16JBfra3tkbUbYi1YE4H8K8WRAG49cTMugkqSQMKZDbZw';\r\nlet accessToken;\r\nconst spotifyEndpoint = 'https://accounts.spotify.com/authorize?'\r\nconst clientId = '2d46f0d79f3141dfae603a7da2a5c873';\r\nconst response_type = 'token';\r\nconst redirect_uri = 'http://localhost:3000';\r\nconst redirectUri = 'http://localhost:3000';\r\n// let expiresIn = 3600;\r\n\r\nexport const Spotify = {\r\n \r\n    getAccessToken() {\r\n        if(accessToken) {\r\n            return accessToken;\r\n        }\r\n        const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n        const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n        if (hasAccessToken && hasExpiresIn) {\r\n            accessToken = hasAccessToken[1];\r\n            const expiresIn = Number(hasExpiresIn[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(\r\n            response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    console.log('API request failed');\r\n                }\r\n        }).then(\r\n            jsonResponse => {\r\n            if(!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n    },\r\n    savePlaylist(playlistName, trackURIs) {\r\n  \r\n        if (!playlistName || !trackURIs.length) {\r\n            return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {\r\n            Authorization: `Bearer ${accessToken}`\r\n        };\r\n        let userId;\r\n         return fetch('https://api.spotify.com/v1/me', {\r\n            headers: headers\r\n        }).then(\r\n            response => {\r\n                if(response.ok) {\r\n                    return response.json();\r\n                }\r\n        }).then(\r\n            jsonResponse => {\r\n                userId = jsonResponse.id;\r\n  \r\n                // Adds playlist to user's account\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({name: playlistName})\r\n                }).then(\r\n                    response => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    } else {\r\n                        console.log('API request failed');\r\n                    }\r\n                }).then(\r\n                    jsonResponse => {\r\n                        const playlistId = jsonResponse.id;\r\n                        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                            headers: headers,\r\n                            method: 'POST',\r\n                            body: JSON.stringify({ uris: trackURIs})\r\n                        });\r\n                    });\r\n            });\r\n  \r\n  \r\n    }\r\n  \r\n }\r\n","import React from \"react\";\r\nimport './search-bar.styles.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);  \r\n        this.state = {\r\n            searchTerm: ''\r\n        }\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n    \r\n\r\n    search(event){\r\n        this.props.onSearch(this.state.searchTerm);\r\n        \r\n    }\r\n\r\n    handleTermChange(event){\r\n        this.setState ({searchTerm: event.target.value});\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n            )\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport './track.styles.css';\r\n\r\n\r\n// export const Track1 = ({name, artist, album,action}) => {\r\n//     return (\r\n\r\n//     <div className=\"Track\">\r\n//         <div className=\"Track-information\">\r\n//             <h3>{name}</h3>\r\n//             <p>{artist}{album}</p>\r\n//         </div>\r\n//     {/* <!-- + or - will go here --> */}\r\n//         <button className=\"Track-action\">{action}</button>\r\n//     </div>\r\n//     )\r\n\r\n\r\n// }\r\nexport class Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction(){\r\n        if (this.props.isRemoval){\r\n             return (<button className=\"Track-action\"\r\n             onClick={this.removeTrack}\r\n         > - </button>)\r\n        } else{\r\n            return (<button className=\"Track-action\"\r\n            onClick={this.addTrack}\r\n        > + </button>)\r\n        }\r\n    }\r\n\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render(){\r\n        const {name, artist, album} = this.props.track; \r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{name}</h3>\r\n                    <p>{artist} | {album}</p>\r\n                </div>\r\n            <button className=\"Track-action\">\r\n            \r\n            {this.renderAction()}</button>\r\n        </div>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport './track-list.styles.css';\r\nimport {Track} from '../track/track.component';\r\n\r\n\r\nexport class TrackList extends React.Component {\r\n    \r\n    \r\n    render(){\r\n        let  tracks = this.props.tracks;\r\n        return (\r\n            <div className=\"TrackList\">\r\n            {\r\n                tracks.map(track => {\r\n                    return (\r\n                        <Track\r\n                        key={track.id}\r\n                        track={track}\r\n                        onAdd={this.props.onAdd}\r\n                        onRemove={this.props.onRemove}\r\n                        isRemoval={this.props.isRemoval}     \r\n                        />)\r\n                })\r\n            }\r\n            </div>\r\n            \r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {TrackList} from '../track-list/track-list.component';\r\nimport './search-results.styles.css'\r\n\r\nexport class SearchResults extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n            <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n    \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport './playlist.styles.css';\r\nimport { TrackList } from '../track-list/track-list.component';\r\n\r\n\r\nexport class PlayList extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event){\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n   render(){\r\n    return(\r\n        <div className=\"Playlist\">\r\n            <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\r\n            <TrackList tracks={this.props.playlistTracks} onRemove = {this.props.onRemove} isRemoval = {true} />\r\n            <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n        </div>\r\n       )\r\n   }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {SearchBar} from '../search-bar/search-bar.component';\nimport {SearchResults} from '../search-results/search-results.component';\nimport {PlayList} from '../playlist/playlist.component';\nimport { Spotify } from '../../util/spotify';\n\nexport class App extends React.Component {\n  constructor(props){\n      super(props);\n      this.state = {\n        searchResults: [],\n        playlistName: '',\n        playlistTracks: []\n      }\n      this.addTrack = this.addTrack.bind(this);\n      this.removeTrack = this.removeTrack.bind(this);\n      this.updatePlaylistName = this.updatePlaylistName.bind(this);\n      this.savePlaylist = this.savePlaylist.bind(this); \n      this.search = this.search.bind(this);\n    }\n\n      addTrack (track) {\n        let currentTracks = this.state.playlistTracks;\n        if (currentTracks.find(savedTrack => savedTrack.id === track.id)) {\n          return;\n        } \n        currentTracks.push(track);\n        this.setState({playlistTracks: currentTracks})\n        \n      }\n\n\n       removeTrack(track){\n        let currentTracks = this.state.playlistTracks;\n        let updatedTracks = currentTracks.filter(selectedTrack => selectedTrack.id !== track.id);\n        this.setState({playlistTracks: updatedTracks})\n      }\n\n      updatePlaylistName (name){\n        this.setState({playlistName: name})\n      }\n      savePlaylist (){\n        const trackURIs = this.state.playlistTracks.map(track => track.uri)\n        Spotify.savePlaylist(this.state.playlistName, trackURIs);\n        this.setState({playlistName: 'New Playlist', playlistTracks: []});\n      }\n\n      search(searchTerm){\n        Spotify.search(searchTerm).then(fetchedData => {\n          this.setState({searchResults: fetchedData})\n        })\n      }\n  \n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n     \n        <SearchBar onSearch={this.search}/>\n        <div className=\"App-playlist\">\n          <SearchResults\n            searchResults = {this.state.searchResults}\n            onAdd = {this.addTrack} />\n          <PlayList\n            playlistName = {this.state.playlistName}\n            playlistTracks = {this.state.playlistTracks}\n            onNameChange = {this.updatePlaylistName}\n            onRemove = {this.removeTrack}\n            onSave = {this.savePlaylist}\n            />\n            \n        </div>\n      </div>\n    );\n  }    \n  \n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}